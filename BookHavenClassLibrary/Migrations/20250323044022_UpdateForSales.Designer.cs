// <auto-generated />
using System;
using BookHavenClassLibrary.Connections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookHavenClassLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250323044022_UpdateForSales")]
    partial class UpdateForSales
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookHavenClassLibrary.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BookGenre")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountPct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Isbn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("LastRestockDate")
                        .HasColumnType("date");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("SaleId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SaleItem", b =>
                {
                    b.Property<int>("SaleItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleItemId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleItemId");

                    b.HasIndex("BookId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Sales", b =>
                {
                    b.Property<int>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<int?>("SaleItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SalesId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleItemId")
                        .IsUnique()
                        .HasFilter("[SaleItemId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SupplierType")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SupplierOrder", b =>
                {
                    b.Property<int>("SupplierOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierOrderId"));

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderStatuses")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderId");

                    b.ToTable("SupplierOrders");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SupplierOrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("SupplierOrderItems");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@bookhaven.com",
                            FirstName = "Admin",
                            LastLoginAt = new DateTime(2024, 3, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "User",
                            PasswordHash = "QpLkF1G7uy0L1+VyiQKduG0qK6JZbbTtFqeRzGcy3Vs=",
                            Role = 0,
                            Salt = "1oX2+HLYhpIImDRzMYlu+g=="
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sales001@bookhaven.com",
                            FirstName = "John",
                            LastLoginAt = new DateTime(2024, 3, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Sales001",
                            PasswordHash = "rCPxaz0+DAoNSKkvruJH3PxjfDMeIyTYlMFrYl1BmPU=",
                            Role = 2,
                            Salt = "cQQxDnVvUg6iSC3qcaVj4Q=="
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "clerk001@bookhaven.com",
                            FirstName = "John",
                            LastLoginAt = new DateTime(2024, 3, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Clerk001",
                            PasswordHash = "Qo2lVpmulOfrFvTYWCP0XlgFQ0q2q+KjQGhhGgNGvd8=",
                            Role = 1,
                            Salt = "qf0effYCz9WKVKXCc2A7Zw=="
                        });
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Payment", b =>
                {
                    b.HasOne("BookHavenClassLibrary.Models.Sales", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SaleItem", b =>
                {
                    b.HasOne("BookHavenClassLibrary.Models.Book", "Book")
                        .WithMany("SaleItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Sales", b =>
                {
                    b.HasOne("BookHavenClassLibrary.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BookHavenClassLibrary.Models.SaleItem", "SaleItem")
                        .WithOne("Sales")
                        .HasForeignKey("BookHavenClassLibrary.Models.Sales", "SaleItemId");

                    b.HasOne("BookHavenClassLibrary.Models.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SaleItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SupplierOrderItem", b =>
                {
                    b.HasOne("BookHavenClassLibrary.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("SupplierOrderItems")
                        .HasForeignKey("SupplierOrderId");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Book", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SaleItem", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.SupplierOrder", b =>
                {
                    b.Navigation("SupplierOrderItems");
                });

            modelBuilder.Entity("BookHavenClassLibrary.Models.User", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
